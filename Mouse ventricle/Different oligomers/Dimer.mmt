[[model]]
name: SERCA2a regulation model 
desc: Human atrial SERCA2a model that incorporates phospholamban and sarcolipin function, phosphorylation and oligomerization



#PLN monomer concentrations
SERCA.P_100 = 0#109.65/4
SERCA.P_110 = 0#109.65/4
SERCA.P_101 = 0#109.65/4
SERCA.P_111 = 0#109.65/4



#PLN pentamer concentrations
SERCA.P_200 = 109.65/9/2
SERCA.P_210 = 109.65/9/2
SERCA.P_220 = 109.65/9/2
SERCA.P_201 = 109.65/9/2
SERCA.P_211 = 109.65/9/2
SERCA.P_221 = 109.65/9/2
SERCA.P_202 = 109.65/9/2
SERCA.P_212 = 109.65/9/2
SERCA.P_222 = 109.65/9/2





[SERCA]

K_PLN_pen = 91 #5 #400000000 to get a 50/50 pen/mon ratio for each phopholamban protein
K_PLN_phos_ser16 = 1 #2.235
K_PLN_phos_thr17 = 2
tau = 500

a = 1 #gegarandeerd 1
b = 2 #gegarandeerd 2
c = 1
d = 2
e = 1 #gegarandeerd 1
#State change parameters


kpln_dephos_ser16 = K_PLN_phos_ser16 / (tau + K_PLN_phos_ser16 * tau) #Rate at which ser16 on a PLN monomer gets dephosphorylated
kpln_phos_ser16 = kpln_dephos_ser16 / K_PLN_phos_ser16 #Rate at which ser16 on a PLN monomer gets phosphorylated


kpln_dephos_thr17 = K_PLN_phos_thr17 / (tau + K_PLN_phos_thr17 * tau) #Rate at which thr17 gets dephosphorylated
kpln_phos_thr17 = kpln_dephos_thr17 / K_PLN_phos_thr17 #Rate at which thr17 gets phosphorylated


kpln_depen = K_PLN_pen / (tau + K_PLN_pen * tau) #Rate at which PLN pentamers depentamerize
kpln_pen = kpln_depen / K_PLN_pen #Rate at which PLN monomers pentamerize

#Transition states24.26269978713475341.37093319871821357e+01

dot(P_100) = ((kpln_dephos_ser16 * P_110 - kpln_phos_ser16 * P_100) + 
  (kpln_dephos_thr17 * P_101 - kpln_phos_thr17 * P_100) +
  2 * (kpln_depen * P_200 - 1 * 1 * kpln_pen * P_100^2) +
  1 * (kpln_depen * P_210 - 1 * 2 * kpln_pen * P_100 * P_110) +
  1 * (kpln_depen * P_201 - 1 * 2 * kpln_pen * P_100 * P_101) +
  1 * (kpln_depen * P_211 - 2 * 2 * kpln_pen * P_100 * P_111)) 

dot(P_101) = ((kpln_dephos_ser16 * P_111 - kpln_phos_ser16 * P_101) + 
  (kpln_phos_thr17 * P_100 - kpln_dephos_thr17 * P_101) +
  1 * (kpln_depen * P_201 - 1 * 2 * kpln_pen * P_100 * P_101) +
  2 * (kpln_depen * P_202 - 1 * 1 * kpln_pen * P_101^2) +
  1 * (kpln_depen * P_211 - 2 * 2 * kpln_pen * P_110 * P_101) +
  1 * (kpln_depen * P_212 - 1 * 2 * kpln_pen * P_101 * P_111)) 
  
dot(P_110) = ((kpln_phos_ser16 * P_100 - kpln_dephos_ser16 * P_110) + 
  (kpln_dephos_thr17 * P_111 - kpln_phos_thr17 * P_110) +
  2 * (kpln_depen * P_220 - 1 * 1 * kpln_pen * P_110^2) +
  1 * (kpln_depen * P_210 - 1 * 2 * kpln_pen * P_100 * P_110) +
  1 * (kpln_depen * P_211 - 2 * 2 * kpln_pen * P_110 * P_101) +
  1 * (kpln_depen * P_221 - 1 * 2 * kpln_pen * P_110 * P_111)) 
  
dot(P_111) = ((kpln_phos_ser16 * P_101 - kpln_dephos_ser16 * P_111) + 
  (kpln_phos_thr17 * P_110 - kpln_dephos_thr17 * P_111) +
  2 * (kpln_depen * P_222 - 1 * 1 * kpln_pen * P_111^2) +
  1 * (kpln_depen * P_211 - 2 * 2 * kpln_pen * P_100 * P_111) +
  1 * (kpln_depen * P_221 - 1 * 2 * kpln_pen * P_111 * P_110) +
  1 * (kpln_depen * P_212 - 1 * 2 * kpln_pen * P_101 * P_111)) 
  
   
dot(P_200) = ((kpln_dephos_ser16 * P_210 - 2 * kpln_phos_ser16 * P_200) + (kpln_dephos_thr17 * P_201 - 2 * kpln_phos_thr17 * P_200) + 
        (a * 1 * kpln_pen * P_100^2 - kpln_depen * P_200))
    
dot(P_210) = ((2 * kpln_dephos_ser16 * P_220 -  kpln_phos_ser16 * P_210) + (kpln_dephos_thr17 * P_211 - 2 * kpln_phos_thr17 * P_210) + (2 * kpln_phos_ser16 * P_200 - kpln_dephos_ser16 * P_210) + 
        (c * 2 * kpln_pen * P_100 * P_110 - kpln_depen * P_210))
    
dot(P_220) = ((kpln_dephos_thr17 * P_221 - 2 * kpln_phos_thr17 * P_220) + (kpln_phos_ser16 * P_210 - 2 * kpln_dephos_ser16 * P_220) + 
        (e * 1 * kpln_pen * P_110^2 - kpln_depen * P_220)) 
    
dot(P_201) = ((kpln_dephos_ser16 * P_211 - 2 * kpln_phos_ser16 * P_201) + (2 * kpln_dephos_thr17 * P_202 - kpln_phos_thr17 * P_201) + (2 * kpln_phos_thr17 * P_200 - kpln_dephos_thr17 * P_201) + 
        (c * 2 * kpln_pen * P_100 * P_101 - kpln_depen * P_201))
    
dot(P_211) = ((2 * kpln_dephos_ser16 * P_221 - kpln_phos_ser16 * P_211) + (2 * kpln_dephos_thr17 * P_212 - kpln_phos_thr17 * P_211) + (2 * kpln_phos_ser16 * P_201 - kpln_dephos_ser16 * P_211) + (2 * kpln_phos_thr17 * P_210 - kpln_dephos_thr17 * P_211) + 
        (d * 2 * kpln_pen * P_101 * P_110 - kpln_depen * P_211) + (b * 2 * kpln_pen * P_111 * P_100 - kpln_depen * P_211))
    
dot(P_221) = ((2 * kpln_dephos_thr17 * P_222 - kpln_phos_thr17 * P_221) + (kpln_phos_ser16 * P_211 - 2 * kpln_dephos_ser16 * P_221) + (2 * kpln_phos_thr17 * P_220 - kpln_dephos_thr17 * P_221) +
        (c * 2 * kpln_pen * P_111 * P_110 - kpln_depen * P_221))
    
dot(P_202) = ((kpln_dephos_ser16 * P_212 - 2 * kpln_phos_ser16 * P_202) + (kpln_phos_thr17 * P_201 - 2 * kpln_dephos_thr17 * P_202) +  
        (e * 1 * kpln_pen * P_101^2 - kpln_depen * P_202))
    
dot(P_212) = ((2 * kpln_dephos_ser16 * P_222 - kpln_phos_ser16 * P_212) + (kpln_phos_thr17 * P_211 - 2 * kpln_dephos_thr17 * P_212) + (2 * kpln_phos_ser16 * P_202 - kpln_dephos_ser16 * P_212) + 
        (c * 2 * kpln_pen * P_101 * P_111 - kpln_depen * P_212))
    
dot(P_222) = ((kpln_phos_ser16 * P_212 - 2 * kpln_dephos_ser16 * P_222) + (kpln_phos_thr17 * P_221 - 2 * kpln_dephos_thr17 * P_222) + 
        (a * 1 * kpln_pen * P_111^2 - kpln_depen * P_222))
    
Pen_P101_P110 = Total_P_Pen/(P_101+P_110)
Pen_P100_P111 = Total_P_Pen/(P_100+P_111)

Total_P = P_100 + P_110 + P_101 + P_111 + 2 * P_200 + 2 * P_210 + 2 * P_220 +  2 * P_201 + 2 * P_211 + 2 * P_221 + 2 * P_202 + 2 * P_212 + 2 * P_222

Total_P_Mon =  P_100 + P_110 + P_101 + P_111
Total_P_Pen =  2 * P_200 + 2 * P_210 + 2 * P_220 +  2 * P_201 + 2 * P_211 + 2 * P_221 + 2 * P_202 + 2 * P_212 + 2 * P_222

Total_P_Mon_PKA = P_110 + P_111
Total_P_Pen_PKA = 1 * P_210 + 2 * P_220 + 1 * P_211 + 2 * P_221 + 1 * P_212 + 2 * P_222
Total_P_Mon_thr17 = P_101 + P_111
Total_P_Pen_thr17 = 1 * P_201 + 2 * P_202 + 1 * P_211 + 2 * P_212 + 1 * P_221 + 2 * P_222
Total_P_thr17 = Total_P_Mon_thr17 + Total_P_Pen_thr17
Total_P_PKA = Total_P_Mon_PKA + Total_P_Pen_PKA


[engine]
time = 0 bind time
    in [ms]
pace = 0 bind pace

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100.0    0.5      1000.0   0

[[script]]
import matplotlib.pyplot as plt
import numpy as np
import myokit
import scipy.optimize



# Get model and protocol, create simulation
m_WT = get_model()
# Get pacing variable
p = m_WT.get('engine.pace')
# Remove binding to pacing mechanism
p.set_binding(None)

# Get membrane potential
v = m_WT.get('Total_P_Pen')

#v.set_rhs(0)
# Bind v's value to the pacing mechanism
v.set_binding('pace')

p = myokit.pacing.steptrain(
    vsteps=Ca_intra,
    vhold = 1E-5,   
    tpre  = 50000,   # 20000 milliseconds pre-conditioning at Vhold
    tstep = 40000,   # 20 seconds at step potential
    )
t = p.characteristic_time()

# Create the errorfunction
def errorfunc(x, showit=0):

    # create simulation
    s = myokit.Simulation(m_WT, p)
    
    #Set the parameters to be changed
    s.set_max_step_size(1000)
    s.set_constant('SERCA.a', x[0])
    s.set_constant('SERCA.b', x[1])
    s.set_constant('SERCA.c', x[2])
    s.set_constant('SERCA.d', x[3])
    s.set_constant('SERCA.e', x[4])
        
    # Run
#    s.pre(20000)
    d = s.run(t)#log=['engine.time', 'Ca_Concentrations.Ca_i', 'SERCA.J_up_new'])
#    plt.figure()
#    plt.subplot(2,1,1)
#    plt.plot(d['engine.time'],d['SERCA.J_up_new'])
#    plt.subplot(2,1,2)
#    plt.plot(d['engine.time'],d['Ca_Concentrations.Ca_i'])
    ds = d.split_periodic(90000, adjust=True)
    # Updating the model Open probability values every iteration so the model curve can be fitted to the experimental data
    model_SERCA_activity = np.ones(len(Ca_intra))
#    print(model_SERCA_activity)
    for k, d in enumerate(ds):
        ds[k] = d.trim_left(70000, adjust=True).trim_right(1000)
#        print(np.max(d['SERCA.J_up_new']))
        model_SERCA_activity[k] = np.max(d['SERCA.normalized_J_up_new']) #gives the max Open Probability for each membrane voltage and puts it in the array
    # Normalize the values
#    model_SERCA_activity_max = model_SERCA_activity[-1:][0]   #This is the value of the open probability of Membrane potential 60mV
#    model_SERCA_activity_max = np.repeat(model_SERCA_activity_max, len(Ca_intra))
#    model_SERCA_activity_final = np.divide(model_SERCA_activity, model_SERCA_activity_max)
    print(model_SERCA_activity)

    #Calculate the error
    error = np.sum((model_SERCA_activity - Relative_SERCA_Activity) * (model_SERCA_activity - Relative_SERCA_Activity))
    
    # Plot the figure and print the results
    if showit ==1:
        plt.figure()
        plt.plot(Ca_intra, model_SERCA_activity, '-k', Ca_intra, Relative_SERCA_Activity, 'o')
        plt.xscale('log')
    print ("X: [%f, %f, %f,%f, %f]; Error: %f" % (x[0], x[1], x[2],x[3], x[4], error))
    return error

# Optimisation    
x0 = [2.4, 14, 7.1,2.31, 0.0002, 2.15,0.001, 0.79, 0.0002,0.79, 0.001, 0.00025,0.00025, 0.00025]

# original parameter inputs
errorfunc(x0, 1)

#xfinal, errfinal = scipy.optimize.minimize(errorfunc, x0,0, method= 'Nelder-Mead', options={'disp': True, 'maxiter': 50})
#errorfunc(xfinal,1)

