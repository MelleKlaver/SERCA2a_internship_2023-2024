[[model]]
name: SERCA2a regulation model 
desc: Human atrial SERCA2a model that incorporates phospholamban and sarcolipin function, phosphorylation and oligomerization

###### Initial values:

#membrane.V = -80

#SERCA2a states
SERCA.S           = 21.5
SERCA.S_P_100       = 0
SERCA.S_P_110       = 0
SERCA.S_P_101       = 0
SERCA.S_P_111       = 0
SERCA.S_N_10       = 0
SERCA.S_N_11      = 0
SERCA.S_P_100_N_10   = 0
SERCA.S_P_100_N_11   = 0
SERCA.S_P_110_N_10   = 0
SERCA.S_P_110_N_11   = 0
SERCA.S_P_101_N_10   = 0
SERCA.S_P_101_N_11   = 0
SERCA.S_P_111_N_10   = 0
SERCA.S_P_111_N_11   = 0

#PLN monomer concentrations
SERCA.P_100 = 109.65
SERCA.P_110 = 0
SERCA.P_101 = 0
SERCA.P_111 = 0

#SLN monomer concentrations
SERCA.N_10 = 9.2
SERCA.N_11 = 0

#PLN pentamer concentrations
SERCA.P_500 = 0
SERCA.P_510 = 0
SERCA.P_520 = 0
SERCA.P_530 = 0
SERCA.P_540 = 0
SERCA.P_550 = 0
SERCA.P_501 = 0
SERCA.P_511 = 0
SERCA.P_521 = 0
SERCA.P_531 = 0
SERCA.P_541 = 0
SERCA.P_551 = 0
SERCA.P_502 = 0
SERCA.P_512 = 0
SERCA.P_522 = 0
SERCA.P_532 = 0
SERCA.P_542 = 0
SERCA.P_552 = 0
SERCA.P_503 = 0
SERCA.P_513 = 0
SERCA.P_523 = 0
SERCA.P_533 = 0
SERCA.P_543 = 0
SERCA.P_553 = 0
SERCA.P_504 = 0
SERCA.P_514 = 0
SERCA.P_524 = 0
SERCA.P_534 = 0
SERCA.P_544 = 0
SERCA.P_554 = 0
SERCA.P_505 = 0
SERCA.P_515 = 0
SERCA.P_525 = 0
SERCA.P_535 = 0
SERCA.P_545 = 0
SERCA.P_555 = 0

#SLN oligomer concentrations
SERCA.N_50 = 0
SERCA.N_51 = 0
SERCA.N_52 = 0
SERCA.N_53 = 0
SERCA.N_54 = 0
SERCA.N_55 = 0

SERCA.Total_S          = 21.5
SERCA.Total_N          = 9.2
SERCA.Total_N_Mon      = 9.2
SERCA.Total_N_Pen      = 0
SERCA.Total_P          = 109.65
SERCA.Total_P_Mon      = 109.65
SERCA.Total_P_Pen      = 0
SERCA.Total_P_Mon_PKA      = 0
SERCA.Total_P_Pen_PKA      = 0
SERCA.Total_P_non_Mon_PKA  = 109.65
SERCA.Total_P_non_Pen_PKA  = 0
SERCA.Total_P_PKA          = 0

[SERCA]

#Estimated parameters
K_SERCA_PLN = 5.4
K_SERCA_SLN = 30
K_PLN_pen
K_SLN_pen = 1000000000
K_PLN_phos_ser16_pen = 0.85 
K_PLN_phos_ser16_mon = 25
K_PLN_phos_thr17 = 7.2
K_SLN_phos = 14.4
tau = 500


#Changing rates

kserca_pln_de = K_SERCA_PLN / (tau + K_SERCA_PLN * tau) #Rate at which SERCA and PLN detach
kserca_pln = kserca_pln_de / K_SERCA_PLN #Rate at which SERCA and PLN bind

kserca_sln_de = K_SERCA_SLN / (tau + K_SERCA_SLN * tau) #Rate at which SERCA and SLN detach
kserca_sln = kserca_sln_de / K_SERCA_SLN #Rate at which SERCA and SLN bind

kpln_dephos_ser16_mon = K_PLN_phos_ser16_mon / (tau + K_PLN_phos_ser16_mon * tau) #Rate at which ser16 on a PLN monomer gets dephosphorylated
kpln_phos_ser16_mon = kpln_dephos_ser16_mon / K_PLN_phos_ser16_mon #Rate at which ser16 on a PLN monomer gets phosphorylated

kpln_dephos_ser16_pen = K_PLN_phos_ser16_pen / (tau + K_PLN_phos_ser16_pen * tau) #Rate at which ser16 on a PLN pentamer gets dephosphorylated
kpln_phos_ser16_pen = kpln_dephos_ser16_pen / K_PLN_phos_ser16_pen #Rate at which ser16 on a PLN pentamer gets phosphorylated

kpln_dephos_thr17 = K_PLN_phos_thr17 / (tau + K_PLN_phos_thr17 * tau) #Rate at which thr17 gets dephosphorylated
kpln_phos_thr17 = kpln_dephos_thr17 / K_PLN_phos_thr17 #Rate at which thr17 gets phosphorylated

ksln_dephos = K_SLN_phos / (tau + K_SLN_phos * tau) #Rate at which SLN  gets dephosphorylated
ksln_phos = ksln_dephos / K_SLN_phos #Rate at which SLN gets phosphorylated

kpln_depen = K_PLN_pen / (tau + K_PLN_pen * tau) #Rate at which PLN pentamers depentamerize
kpln_pen = kpln_depen / K_PLN_pen #Rate at which PLN monomers pentamerize

ksln_depen = K_SLN_pen / (tau + K_SLN_pen * tau) #Rate at which SLN monomers depentamerize
ksln_pen = ksln_depen / K_SLN_pen #Rate at which SLN monomers pentamerize

#Transition states

dot(S) = ((kserca_pln_de * S_P_100 - kserca_pln * S * P_100) + 
  (kserca_pln_de * S_P_110 - kserca_pln * S * P_110) +
  (kserca_pln_de * S_P_101 - kserca_pln * S * P_101) +
  (kserca_pln_de * S_P_111 - kserca_pln * S * P_111) +
  (kserca_sln_de * S_N_10 - kserca_sln * S * N_10) +
  (kserca_sln_de * S_N_11 - kserca_sln * S * N_11)) 
 
dot(S_P_100) = ((kserca_pln * S * P_100 - kserca_pln_de * S_P_100) + 
  (kserca_sln_de * S_P_100_N_10 - kserca_sln * S_P_100 * N_10) + 
  (kserca_sln_de * S_P_100_N_11 - kserca_sln * S_P_100 * N_11) +
  (kpln_dephos_ser16_mon * S_P_110 - kpln_phos_ser16_mon * S_P_100) + 
  (kpln_dephos_thr17 * S_P_101 - kpln_phos_thr17 * S_P_100))  
  
dot(S_P_110) = ((kserca_pln * S * P_110 - kserca_pln_de * S_P_110) + 
  (kserca_sln_de * S_P_110_N_10 - kserca_sln * S_P_110 * N_10) + 
  (kserca_sln_de * S_P_110_N_11 - kserca_sln * S_P_110 * N_11) +
  (kpln_phos_ser16_mon * S_P_100 - kpln_dephos_ser16_mon * S_P_110) + 
  (kpln_dephos_thr17 * S_P_111 - kpln_phos_thr17 * S_P_110))  
  
dot(S_P_101) = ((kserca_pln * S * P_101 - kserca_pln_de * S_P_101) + 
  (kserca_sln_de * S_P_101_N_10 - kserca_sln * S_P_101 * N_10) + 
  (kserca_sln_de * S_P_101_N_11 - kserca_sln * S_P_101 * N_11) +
  (kpln_dephos_ser16_mon * S_P_111 - kpln_phos_ser16_mon * S_P_101) +
  (kpln_phos_thr17 * S_P_100 - kpln_dephos_thr17 * S_P_101))  
  
dot(S_P_111) = ((kserca_pln * S * P_111 - kserca_pln_de * S_P_111) + 
  (kserca_sln_de * S_P_111_N_10 - kserca_sln * S_P_111 * N_10) + 
  (kserca_sln_de * S_P_111_N_11 - kserca_sln * S_P_111 * N_11) +
  (kpln_phos_ser16_mon * S_P_101 - kpln_dephos_ser16_mon * S_P_111) +
  (kpln_phos_thr17 * S_P_110 - kpln_dephos_thr17 * S_P_111))  

dot(S_N_10) = ((kserca_sln * S * N_10 - kserca_sln_de * S_N_10) + 
  (kserca_pln_de * S_P_100_N_10 - kserca_pln * S_N_10 * P_100) + 
  (kserca_pln_de * S_P_110_N_10 - kserca_pln * S_N_10 * P_110) +
  (kserca_pln_de * S_P_101_N_10 - kserca_pln * S_N_10 * P_101) + 
  (kserca_pln_de * S_P_111_N_10 - kserca_pln * S_N_10 * P_111) +
  (ksln_dephos * S_N_11 - ksln_phos * S_N_10))  

dot(S_N_11) = ((kserca_sln * S * N_11 - kserca_sln_de * S_N_11) + 
  (kserca_pln_de * S_P_100_N_11 - kserca_pln * S_N_11 * P_100) + 
  (kserca_pln_de * S_P_110_N_11 - kserca_pln * S_N_11 * P_110) +
  (kserca_pln_de * S_P_101_N_11 - kserca_pln * S_N_11 * P_101) + 
  (kserca_pln_de * S_P_111_N_11 - kserca_pln * S_N_11 * P_111) +
  (ksln_phos * S_N_10 - ksln_dephos * S_N_11))  
  
dot(S_P_100_N_10) = ((kserca_pln * S_N_10 * P_100 - kserca_pln_de * S_P_100_N_10) + 
  (kserca_sln * S_P_100 * N_10 - kserca_sln_de * S_P_100_N_10) +
  (kpln_dephos_ser16_mon * S_P_110_N_10 - kpln_phos_ser16_mon * S_P_100_N_10) + 
  (kpln_dephos_thr17 * S_P_101_N_10 - kpln_phos_thr17 * S_P_100_N_10) +
  (ksln_dephos * S_P_100_N_11 - ksln_phos * S_P_100_N_10))  
  
dot(S_P_100_N_11) = ((kserca_pln * S_N_11 * P_100 - kserca_pln_de * S_P_100_N_11) + 
  (kserca_sln * S_P_100 * N_11 - kserca_sln_de * S_P_100_N_11) +
  (kpln_dephos_ser16_mon * S_P_110_N_11 - kpln_phos_ser16_mon * S_P_100_N_11) + 
  (kpln_dephos_thr17 * S_P_101_N_11 - kpln_phos_thr17 * S_P_100_N_11) + 
  (ksln_phos * S_P_100_N_10 - ksln_dephos * S_P_100_N_11))  

dot(S_P_110_N_10) = ((kserca_pln * S_N_10 * P_110 - kserca_pln_de * S_P_110_N_10) + 
  (kserca_sln * S_P_110 * N_10 - kserca_sln_de * S_P_110_N_10) +
  (kpln_phos_ser16_mon * S_P_100_N_10 - kpln_dephos_ser16_mon * S_P_110_N_10) + 
  (kpln_dephos_thr17 * S_P_111_N_10 - kpln_phos_thr17 * S_P_110_N_10) +
  (ksln_dephos * S_P_110_N_11 - ksln_phos * S_P_110_N_10))  
  
dot(S_P_110_N_11) = ((kserca_pln * S_N_11 * P_110 - kserca_pln_de * S_P_110_N_11) + 
  (kserca_sln * S_P_110 * N_11 - kserca_sln_de * S_P_110_N_11) +
  (kpln_phos_ser16_mon * S_P_100_N_11 - kpln_dephos_ser16_mon * S_P_110_N_11) + 
  (kpln_dephos_thr17 * S_P_111_N_11 - kpln_phos_thr17 * S_P_110_N_11) +
  (ksln_phos * S_P_110_N_10 - ksln_dephos * S_P_110_N_11))  

dot(S_P_101_N_10) = ((kserca_pln * S_N_10 * P_101 - kserca_pln_de * S_P_101_N_10) + 
  (kserca_sln * S_P_101 * N_10 - kserca_sln_de * S_P_101_N_10) +
  (kpln_dephos_ser16_mon * S_P_111_N_10 - kpln_phos_ser16_mon * S_P_101_N_10) + 
  (kpln_phos_thr17 * S_P_100_N_10 - kpln_dephos_thr17 * S_P_101_N_10) +
  (ksln_dephos * S_P_101_N_11 - ksln_phos * S_P_101_N_10))  
  
dot(S_P_101_N_11) = ((kserca_pln * S_N_11 * P_101 - kserca_pln_de * S_P_101_N_11) + 
  (kserca_sln * S_P_101 * N_11 - kserca_sln_de * S_P_101_N_11) +
  (kpln_dephos_ser16_mon * S_P_111_N_11 - kpln_phos_ser16_mon * S_P_101_N_11) + 
  (kpln_phos_thr17 * S_P_100_N_11 - kpln_dephos_thr17 * S_P_101_N_11) +
  (ksln_phos * S_P_101_N_10 - ksln_dephos * S_P_101_N_11))  

dot(S_P_111_N_10) = ((kserca_pln * S_N_10 * P_111 - kserca_pln_de * S_P_111_N_10) + 
  (kserca_sln * S_P_111 * N_10 - kserca_sln_de * S_P_111_N_10) +
  (kpln_phos_ser16_mon * S_P_101_N_10 - kpln_dephos_ser16_mon * S_P_111_N_10) + 
  (kpln_phos_thr17 * S_P_110_N_10 - kpln_dephos_thr17 * S_P_111_N_10) +
  (ksln_dephos * S_P_111_N_11 - ksln_phos * S_P_111_N_10))  
  
dot(S_P_111_N_11) = ((ksln_phos * S_P_111_N_10 - ksln_dephos * S_P_111_N_11) + 
  (kpln_phos_thr17 * S_P_110_N_11 - kpln_dephos_thr17 * S_P_111_N_11) + 
  (kpln_phos_ser16_mon * S_P_101_N_11 - kpln_dephos_ser16_mon * S_P_111_N_11) + 
  (kserca_pln * S_N_11 * P_111 - kserca_pln_de * S_P_111_N_11) + 
  (kserca_sln * S_P_111 * N_11 - kserca_sln_de * S_P_111_N_11))
  
dot(P_100) = ((kserca_pln_de * S_P_100 - kserca_pln * S * P_100) + 
  (kserca_pln_de * S_P_100_N_10 - kserca_pln * S_N_10 * P_100) +
  (kserca_pln_de * S_P_100_N_11 - kserca_pln * S_N_11 * P_100) +
  (kpln_dephos_ser16_mon * P_110 - kpln_phos_ser16_mon * P_100) + 
  (kpln_dephos_thr17 * P_101 - kpln_phos_thr17 * P_100) +
  5 * ((kpln_depen * P_500)/1 - kpln_pen * P_100^5) +
  4 * ((kpln_depen * P_510)/5 - kpln_pen * P_100^4 * P_110) +
  3 * ((kpln_depen * P_520)/10 - kpln_pen * P_100^3 * P_110^2) +
  2 * ((kpln_depen * P_530)/10 - kpln_pen * P_100^2 * P_110^3) +
  1 * ((kpln_depen * P_540)/5 - kpln_pen * P_100 * P_110^4) + 
  4 * ((kpln_depen * P_501)/5 - kpln_pen * P_100^4 * P_101) + 
  4 * ((kpln_depen * P_511)/25 - kpln_pen * P_100^4 * P_111) + 3 * ((kpln_depen * P_511)/25 - kpln_pen * P_100^3 * P_110 * P_101) +
  3 * ((kpln_depen * P_521)/50 - kpln_pen * P_100^3 * P_110 * P_111) + 2 * ((kpln_depen * P_521)/50 - kpln_pen  * P_100^2 * P_110^2 * P_101) + 
  2 * ((kpln_depen * P_531)/50 - kpln_pen * P_100^2 * P_110^2 * P_111) + 1 * ((kpln_depen * P_531)/50 - kpln_pen * P_100 * P_110^3 * P_101) +
  1 * ((kpln_depen * P_541)/25 - kpln_pen * P_100 * P_110^3 * P_111) +    
  3 * ((kpln_depen * P_502)/10 - kpln_pen * P_100^3 * P_101^2) + 
  3 * ((kpln_depen * P_512)/50 - kpln_pen * P_100^3 * P_101 * P_111) + 2 * ((kpln_depen * P_512)/50 - kpln_pen * P_100^2 * P_110 * P_101^2) +
  3 * ((kpln_depen * P_522)/100 - kpln_pen * P_100^3 * P_111^2) + 2 * ((kpln_depen * P_522)/100 - kpln_pen * P_100^2 * P_110 * P_101 * P_111) + 1 * ((kpln_depen * P_522)/100 - kpln_pen * P_100 * P_110^2 * P_101^2) +
  2 * ((kpln_depen * P_532)/100 - kpln_pen * P_100^2 * P_110 * P_111^2) + 1 * ((kpln_depen * P_532)/100 - kpln_pen  * P_100 * P_110^2 * P_101 * P_111) +
  1 * ((kpln_depen * P_542)/50 - kpln_pen * P_100 * P_110^2 * P_111^2) +   
  2 * ((kpln_depen * P_503)/10 - kpln_pen * P_100^2 * P_101^3) + 
  2 * ((kpln_depen * P_513)/50 - kpln_pen * P_100^2 * P_101^2 * P_111) + 1 * ((kpln_depen * P_513)/50 - kpln_pen * P_100 * P_110 * P_101^3) +
  2 * ((kpln_depen * P_523)/100 - kpln_pen * P_100^2 * P_101 * P_111^2) + 1 * ((kpln_depen * P_523)/100 - kpln_pen * P_100 * P_110 * P_101^2 * P_111) +
  2 * ((kpln_depen * P_533)/100 - kpln_pen * P_100^2 * P_111^3) + 1 * ((kpln_depen * P_533)/100 - kpln_pen  * P_100 * P_110 * P_101 * P_111^2) +
  1 * ((kpln_depen * P_543)/50 - kpln_pen * P_100 * P_110 * P_111^3) +  
  1 * ((kpln_depen * P_504)/5 - kpln_pen * P_100 * P_101^4) + 
  1 * ((kpln_depen * P_514)/25 - kpln_pen * P_100 * P_101^3 * P_111) +
  1 * ((kpln_depen * P_524)/50 - kpln_pen * P_100 * P_101^2 * P_111^2) + 
  1 * ((kpln_depen * P_534)/50 - kpln_pen * P_100 * P_101 * P_111^3) + 
  1 * ((kpln_depen * P_544)/25 - kpln_pen * P_100 * P_111^4)) 
  
dot(P_110) = ((kserca_pln_de * S_P_110 - kserca_pln * S * P_110) + 
  (kserca_pln_de * S_P_110_N_10 - kserca_pln * S_N_10 * P_110) +
  (kserca_pln_de * S_P_110_N_11 - kserca_pln * S_N_11 * P_110) +
  (kpln_phos_ser16_mon * P_100 - kpln_dephos_ser16_mon * P_110) + 
  (kpln_dephos_thr17 * P_111 - kpln_phos_thr17 * P_110) +
  1 * ((kpln_depen * P_510)/5 - kpln_pen * P_100^4 * P_110) +
  2 * ((kpln_depen * P_520)/10 - kpln_pen * P_100^3 * P_110^2) +
  3 * ((kpln_depen * P_530)/10 - kpln_pen * P_100^2 * P_110^3) +
  4 * ((kpln_depen * P_540)/5 - kpln_pen * P_100 * P_110^4) +
  5 * ((kpln_depen * P_550)/1 - kpln_pen * P_110^5) +  
  1 * ((kpln_depen * P_511)/25 - kpln_pen * P_100^3 * P_110 * P_101) +
  1 * ((kpln_depen * P_521)/50 - kpln_pen * P_100^3 * P_110 * P_111) + 2 * ((kpln_depen * P_521)/50 - kpln_pen * P_100^2 * P_110^2 * P_101) + 
  2 * ((kpln_depen * P_531)/50 - kpln_pen * P_100^2 * P_110^2 * P_111) + 3 * ((kpln_depen * P_531)/50 - kpln_pen * P_100 * P_110^3 * P_101) +
  3 * ((kpln_depen * P_541)/25 - kpln_pen * P_100 * P_110^3 * P_111) + 4 * ((kpln_depen * P_541)/25 - kpln_pen * P_110^4 * P_101) +    
  4 * ((kpln_depen * P_551)/5 - kpln_pen * P_110^4 * P_111) + 
  1 * ((kpln_depen * P_512)/50 - kpln_pen * P_100^2 * P_110 * P_101^2) +
  1 * ((kpln_depen * P_522)/100 - kpln_pen * P_100^2 * P_110 * P_101 * P_111) + 2 * ((kpln_depen * P_522)/100 - kpln_pen * P_100 * P_110^2 * P_101^2) +
  1 * ((kpln_depen * P_532)/100 - kpln_pen * P_100^2 * P_110 * P_111^2) + 2 * ((kpln_depen * P_532)/100 - kpln_pen * P_100 * P_110^2 * P_101 * P_111) + 3 * ((kpln_depen * P_532)/100 - kpln_pen * P_110^3 * P_101^2) +  
  2 * ((kpln_depen * P_542)/50 - kpln_pen * P_100 * P_110^2 * P_111^2) + 3 * ((kpln_depen * P_542)/50 - kpln_pen * P_110^3 * P_101 * P_111) +   
  3 * ((kpln_depen * P_552)/10 - kpln_pen * P_110^3 * P_111^2) + 
  1 * ((kpln_depen * P_513)/50 - kpln_pen * P_100 * P_110 * P_101^3) +
  1 * ((kpln_depen * P_523)/100 - kpln_pen * P_100 * P_110 * P_101^2 * P_111) + 2 * ((kpln_depen * P_523)/100 - kpln_pen * P_110^2 * P_101^3) +
  1 * ((kpln_depen * P_533)/100 - kpln_pen * P_100 * P_110 * P_101 * P_111^2) + 2 * ((kpln_depen * P_533)/100 - kpln_pen * P_110^2 * P_101^2 * P_111) +
  1 * ((kpln_depen * P_543)/50 - kpln_pen * P_100 * P_110 * P_111^3) + 2 * ((kpln_depen * P_543)/50 - kpln_pen * P_110^2 * P_101 * P_111^2) + 
  2 * ((kpln_depen * P_553)/10 - kpln_pen * P_110^2 * P_111^3) + 
  1 * ((kpln_depen * P_514)/25 - kpln_pen * P_110 * P_101^4) +
  1 * ((kpln_depen * P_524)/50 - kpln_pen * P_110 * P_101^3 * P_111) +  
  1 * ((kpln_depen * P_534)/50 - kpln_pen * P_110 * P_101^2 * P_111^2) + 
  1 * ((kpln_depen * P_544)/25 - kpln_pen * P_110 * P_101 * P_111^3) +
  1 * ((kpln_depen * P_554)/5 - kpln_pen * P_110 * P_111^4))

dot(P_101) = ((kserca_pln_de * S_P_101 - kserca_pln * S * P_101) + 
  (kserca_pln_de * S_P_101_N_10 - kserca_pln * S_N_10 * P_101) +
  (kserca_pln_de * S_P_101_N_11 - kserca_pln * S_N_11 * P_101) +
  (kpln_dephos_ser16_mon * P_111 - kpln_phos_ser16_mon * P_101) + 
  (kpln_phos_thr17 * P_100 - kpln_dephos_thr17 * P_101) + 
  1 * ((kpln_depen * P_501)/5 - kpln_pen * P_100^4 * P_101) +
  1 * ((kpln_depen * P_511)/25 - kpln_pen * P_100^3 * P_110 * P_101) +
  1 * ((kpln_depen * P_521)/50 - kpln_pen * P_100^2 * P_110^2 * P_101) + 
  1 * ((kpln_depen * P_531)/50 - kpln_pen * P_100 * P_110^3 * P_101) +
  1 * ((kpln_depen * P_541)/25 - kpln_pen * P_110^4 * P_101) +    
  2 * ((kpln_depen * P_502)/10 - kpln_pen * P_100^3 * P_101^2) + 
  2 * ((kpln_depen * P_512)/50 - kpln_pen * P_100^2 * P_110 * P_101^2) + 1 * ((kpln_depen * P_512)/50 - kpln_pen * P_100^3 * P_101 * P_111) + 
  1 * ((kpln_depen * P_522)/100 - kpln_pen * P_100^2 * P_110 * P_101 * P_111) + 2 * ((kpln_depen * P_522)/100 - kpln_pen * P_100 * P_110^2 * P_101^2) +
  1 * ((kpln_depen * P_532)/100 - kpln_pen * P_100 * P_110^2 * P_101 * P_111) + 2 * ((kpln_depen * P_532)/100 - kpln_pen * P_110^3 * P_101^2) +  
  1 * ((kpln_depen * P_542)/50 - kpln_pen * P_110^3 * P_101 * P_111) +   
  3 * ((kpln_depen * P_503)/10 - kpln_pen * P_100^2 * P_101^3) +
  3 * ((kpln_depen * P_513)/50 - kpln_pen * P_100 * P_110 * P_101^3) + 2 * ((kpln_depen * P_513)/50 - kpln_pen * P_100^2 * P_101^2 * P_111) + 
  2 * ((kpln_depen * P_523)/100 - kpln_pen * P_100 * P_110 * P_101^2 * P_111) + 3 * ((kpln_depen * P_523)/100 - kpln_pen * P_110^2 * P_101^3) + 1 * ((kpln_depen * P_523)/100 - kpln_pen * P_100^2 * P_101 * P_111^2) +
  1 * ((kpln_depen * P_533)/100 - kpln_pen * P_100 * P_110 * P_101 * P_111^2) + 2 * ((kpln_depen * P_533)/100 - kpln_pen * P_110^2 * P_101^2 * P_111) +
  1 * ((kpln_depen * P_543)/50 - kpln_pen * P_110^2 * P_101 * P_111^2) + 
  4 * ((kpln_depen * P_504)/5 - kpln_pen * P_101^4 * P_100) + 
  4 * ((kpln_depen * P_514)/25 - kpln_pen * P_110 * P_101^4) + 3 * ((kpln_depen * P_514)/25 - kpln_pen * P_100 * P_101^3 * P_111) + 
  3 * ((kpln_depen * P_524)/50 - kpln_pen * P_110 * P_101^3 * P_111) + 2 * ((kpln_depen * P_524)/50 - kpln_pen * P_100 * P_101^2 * P_111^2) +   
  2 * ((kpln_depen * P_534)/50 - kpln_pen * P_110 * P_101^2 * P_111^2) + 1 * ((kpln_depen * P_534)/50 - kpln_pen * P_100 * P_101 * P_111^3) +  
  1 * ((kpln_depen * P_544)/25 - kpln_pen * P_110 * P_111^3 * P_101) +
  5 * ((kpln_depen * P_505)/1 - kpln_pen * P_101^5) +
  4 * ((kpln_depen * P_515)/5 - kpln_pen * P_101^4 * P_111) + 
  3 * ((kpln_depen * P_525)/10 - kpln_pen * P_101^3 * P_111^2) +  
  2 * ((kpln_depen * P_535)/10 - kpln_pen * P_101^2 * P_111^3) + 
  1 * ((kpln_depen * P_545)/5 - kpln_pen * P_101 * P_111^4)) 
  
dot(P_111) = ((kserca_pln_de * S_P_111 - kserca_pln * S * P_111) + 
  (kserca_pln_de * S_P_111_N_10 - kserca_pln * S_N_10 * P_111) +
  (kserca_pln_de * S_P_111_N_11 - kserca_pln * S_N_11 * P_111) +
  (kpln_phos_ser16_mon * P_101 - kpln_dephos_ser16_mon * P_111) + 
  (kpln_phos_thr17 * P_110 - kpln_dephos_thr17 * P_111) + 
  1 * ((kpln_depen * P_511)/25 - kpln_pen * P_100^4 * P_111) +
  1 * ((kpln_depen * P_521)/50 - kpln_pen * P_100^3 * P_110 * P_111) + 
  1 * ((kpln_depen * P_531)/50 - kpln_pen * P_100^2 * P_110^2 * P_111) +
  1 * ((kpln_depen * P_541)/25 - kpln_pen * P_100 * P_110^3 * P_111) +
  1 * ((kpln_depen * P_551)/5 - kpln_pen * P_110^4 * P_111) +       
  1 * ((kpln_depen * P_512)/50 - kpln_pen * P_100^3 * P_101 * P_111) + 
  1 * ((kpln_depen * P_522)/100 - kpln_pen * P_100^2 * P_110 * P_101 * P_111) + 2 * ((kpln_depen * P_522)/100 - kpln_pen  * P_100^3 * P_111^2) +
  1 * ((kpln_depen * P_532)/100 - kpln_pen * P_100 * P_110^2 * P_101 * P_111) + 2 * ((kpln_depen * P_532)/100 - kpln_pen * P_100^2 * P_110 * P_111^2) +  
  1 * ((kpln_depen * P_542)/50 - kpln_pen * P_110^3 * P_101 * P_111) + 2 * ((kpln_depen * P_542)/50 - kpln_pen * P_100 * P_110^2 * P_111^2) +    
  2 * ((kpln_depen * P_552)/10 - kpln_pen * P_110^3 * P_111^2) + 
  1 * ((kpln_depen * P_513)/50 - kpln_pen * P_100^2 * P_101^2 * P_111) + 
  1 * ((kpln_depen * P_523)/100 - kpln_pen * P_100 * P_110 * P_101^2 * P_111) + 2 * ((kpln_depen * P_523)/100 - kpln_pen * P_100^2 * P_101 * P_111^2) +
  2 * ((kpln_depen * P_533)/100 - kpln_pen * P_100 * P_110 * P_101 * P_111^2) + 1 * ((kpln_depen * P_533)/100 - kpln_pen * P_110^2 * P_101^2 * P_111) + 3 * ((kpln_depen * P_533)/100 - kpln_pen * P_100^2 * P_111^3) +
  2 * ((kpln_depen * P_543)/50 - kpln_pen * P_110^2 * P_101 * P_111^2) + 3 * ((kpln_depen * P_543)/50 - kpln_pen * P_100 * P_110 * P_111^3) +   
  3 * ((kpln_depen * P_553)/10 - kpln_pen * P_110^2 * P_111^3) +   
  1 * ((kpln_depen * P_514)/25 - kpln_pen * P_100 * P_101^3 * P_111) + 
  1 * ((kpln_depen * P_524)/50 - kpln_pen * P_110 * P_101^3 * P_111) + 2 * ((kpln_depen * P_524)/50 - kpln_pen * P_100 * P_101^2 * P_111^2) +   
  2 * ((kpln_depen * P_534)/50 - kpln_pen * P_110 * P_101^2 * P_111^2) + 3 * ((kpln_depen * P_534)/50 - kpln_pen * P_100 * P_101 * P_111^3) +  
  3 * ((kpln_depen * P_544)/25 - kpln_pen * P_110 * P_111^3 * P_101) + 4 * ((kpln_depen * P_544)/25 - kpln_pen * P_100 * P_111^4) +
  4 * ((kpln_depen * P_554)/5 - kpln_pen * P_110 * P_111^4) +
  1 * ((kpln_depen * P_515)/5 - kpln_pen * P_101^4 * P_111) + 
  2 * ((kpln_depen * P_525)/10 - kpln_pen * P_101^3 * P_111^2) +  
  3 * ((kpln_depen * P_535)/10 - kpln_pen * P_101^2 * P_111^3) + 
  4 * ((kpln_depen * P_545)/5 - kpln_pen * P_101 * P_111^4) + 
  5 * ((kpln_depen * P_555)/1 - kpln_pen * P_111^5))
  
dot(P_500) = ((kpln_dephos_ser16_pen * P_510 - 5 * kpln_phos_ser16_pen * P_500) + (kpln_dephos_thr17 * P_501 - 5 * kpln_phos_thr17 * P_500) + 
        (kpln_pen * P_100^5 - (kpln_depen * P_500)/1))
    
dot(P_510) = ((2 * kpln_dephos_ser16_pen * P_520 - 4 * kpln_phos_ser16_pen * P_510) + (kpln_dephos_thr17 * P_511 - 5 * kpln_phos_thr17 * P_510) + (5 * kpln_phos_ser16_pen * P_500 - kpln_dephos_ser16_pen * P_510) + 
        (kpln_pen * P_100^4 * P_110 - (kpln_depen * P_510)/5))
    
dot(P_520) = ((3 * kpln_dephos_ser16_pen * P_530 - 3 * kpln_phos_ser16_pen * P_520) + (kpln_dephos_thr17 * P_521 - 5 * kpln_phos_thr17 * P_520) + (4 * kpln_phos_ser16_pen * P_510 - 2 * kpln_dephos_ser16_pen * P_520) + 
        (kpln_pen * P_100^3 * P_110^2 - (kpln_depen * P_520)/10)) 
    
dot(P_530) = ((4 * kpln_dephos_ser16_pen * P_540 - 2 * kpln_phos_ser16_pen * P_530) + (kpln_dephos_thr17 * P_531 - 5 * kpln_phos_thr17 * P_530) + (3 * kpln_phos_ser16_pen * P_520 - 3 * kpln_dephos_ser16_pen * P_530) + 
        (kpln_pen * P_100^2 * P_110^3 - (kpln_depen * P_530)/10))
    
dot(P_540) = ((5 * kpln_dephos_ser16_pen * P_550 - kpln_phos_ser16_pen * P_540) + (kpln_dephos_thr17 * P_541 - 5 * kpln_phos_thr17 * P_540) + (2 * kpln_phos_ser16_pen * P_530 - 4 * kpln_dephos_ser16_pen * P_540) + 
        (kpln_pen * P_100 * P_110^4 - (kpln_depen * P_540)/5))
    
dot(P_550) = ((kpln_dephos_thr17 * P_551 - 5 * kpln_phos_thr17 * P_550) + (kpln_phos_ser16_pen * P_540 - 5 * kpln_dephos_ser16_pen * P_550) + 
        (kpln_pen * P_110^5 - (kpln_depen * P_550)/1))
    
dot(P_501) = ((kpln_dephos_ser16_pen * P_511 - 5 * kpln_phos_ser16_pen * P_501) + (2 * kpln_dephos_thr17 * P_502 - 4 * kpln_phos_thr17 * P_501) + (5 * kpln_phos_thr17 * P_500 - kpln_dephos_thr17 * P_501) + 
        (kpln_pen * P_100^4 * P_101 - (kpln_depen * P_501)/5))
    
dot(P_511) = ((2 * kpln_dephos_ser16_pen * P_521 - 4 * kpln_phos_ser16_pen * P_511) + (2 * kpln_dephos_thr17 * P_512 - 4 * kpln_phos_thr17 * P_511) + (5 * kpln_phos_ser16_pen * P_501 - kpln_dephos_ser16_pen * P_511) + (5 * kpln_phos_thr17 * P_510 - kpln_dephos_thr17 * P_511) + 
        (kpln_pen * P_100^3 * P_110 * P_101 - (kpln_depen * P_511)/25) + (kpln_pen * P_100^4 * P_111 - (kpln_depen * P_511)/25))
    
dot(P_521) = ((3 * kpln_dephos_ser16_pen * P_531 - 3 * kpln_phos_ser16_pen * P_521) + (2 * kpln_dephos_thr17 * P_522 - 4 * kpln_phos_thr17 * P_521) + (4 * kpln_phos_ser16_pen * P_511 - 2 * kpln_dephos_ser16_pen * P_521) + (5 * kpln_phos_thr17 * P_520 - kpln_dephos_thr17 * P_521) + 
        (kpln_pen * P_100^2 * P_110^2 * P_101 - (kpln_depen * P_521)/50) + (kpln_pen * P_100^3 * P_111 * P_110 - (kpln_depen * P_521)/50))
    
dot(P_531) = ((4 * kpln_dephos_ser16_pen * P_541 - 2 * kpln_phos_ser16_pen * P_531) + (2 * kpln_dephos_thr17 * P_532 - 4 * kpln_phos_thr17 * P_531) + (3 * kpln_phos_ser16_pen * P_521 - 3 * kpln_dephos_ser16_pen * P_531) + (5 * kpln_phos_thr17 * P_530 - kpln_dephos_thr17 * P_531) + 
        (kpln_pen * P_100^2 * P_111 * P_110^2 - (kpln_depen * P_531)/50) + (kpln_pen * P_100 * P_110^3 * P_101 - (kpln_depen * P_531)/50))
   
dot(P_541) = ((5 * kpln_dephos_ser16_pen * P_551 - kpln_phos_ser16_pen * P_541) + (2 * kpln_dephos_thr17 * P_542 - 4 * kpln_phos_thr17 * P_541) + (2 * kpln_phos_ser16_pen * P_531 - 4 * kpln_dephos_ser16_pen * P_541) + (5 * kpln_phos_thr17 * P_540 - kpln_dephos_thr17 * P_541) + 
        (kpln_pen * P_100 * P_111 * P_110^3 - (kpln_depen * P_541)/25) + (kpln_pen * P_110^4 * P_101 - (kpln_depen * P_541)/25))
    
dot(P_551) = ((2 * kpln_dephos_thr17 * P_552 - 4 * kpln_phos_thr17 * P_551) + (kpln_phos_ser16_pen * P_541 - 5 * kpln_dephos_ser16_pen * P_551) + (5 * kpln_phos_thr17 * P_550 - kpln_dephos_thr17 * P_551) + 
        (kpln_pen * P_110^4 * P_111 - (kpln_depen * P_551)/5))
    
dot(P_502) = ((kpln_dephos_ser16_pen * P_512 - 5 * kpln_phos_ser16_pen * P_502) + (3 * kpln_dephos_thr17 * P_503 - 3 * kpln_phos_thr17 * P_502) + (4 * kpln_phos_thr17 * P_501 - 2 * kpln_dephos_thr17 * P_502) + 
        (kpln_pen * P_100^3 * P_101^2 - (kpln_depen * P_502)/10))
    
dot(P_512) = ((2 * kpln_dephos_ser16_pen * P_522 - 4 * kpln_phos_ser16_pen * P_512) + (3 * kpln_dephos_thr17 * P_513 - 3 * kpln_phos_thr17 * P_512) + (5 * kpln_phos_ser16_pen * P_502 - kpln_dephos_ser16_pen * P_512) + (4 * kpln_phos_thr17 * P_511 - 2 * kpln_dephos_thr17 * P_512) + 
        (kpln_pen * P_100^2 * P_110 * P_101^2 - (kpln_depen * P_512)/50) + (kpln_pen * P_100^3 * P_111 * P_101 - (kpln_depen * P_512)/50))
    
dot(P_522) = ((3 * kpln_dephos_ser16_pen * P_532 - 3 * kpln_phos_ser16_pen * P_522) + (3 * kpln_dephos_thr17 * P_523 - 3 * kpln_phos_thr17 * P_522) + (4 * kpln_phos_ser16_pen * P_512 - 2 * kpln_dephos_ser16_pen * P_522) + (4 * kpln_phos_thr17 * P_521 - 2 * kpln_dephos_thr17 * P_522) + 
        (kpln_pen * P_100^2 * P_111 * P_110 * P_101 - (kpln_depen * P_522)/100) + (kpln_pen * P_100 * P_110^2 * P_101^2 - (kpln_depen * P_522)/100) + (kpln_pen * P_100^3 * P_111^2 - (kpln_depen * P_522)/100))
    
dot(P_532) = ((4 * kpln_dephos_ser16_pen * P_542 - 2 * kpln_phos_ser16_pen * P_532) + (3 * kpln_dephos_thr17 * P_533 - 3 * kpln_phos_thr17 * P_532) + (3 * kpln_phos_ser16_pen * P_522 - 3 * kpln_dephos_ser16_pen * P_532) + (4 * kpln_phos_thr17 * P_531 - 2 * kpln_dephos_thr17 * P_532) + 
        (kpln_pen * P_100 * P_111 * P_110^2 * P_101 - (kpln_depen * P_532)/100) + (kpln_pen * P_111^2 * P_110 * P_100^2 - (kpln_depen * P_532)/100) + (kpln_pen * P_110^3 * P_101^2 - (kpln_depen * P_532)/100))
    
dot(P_542) = ((5 * kpln_dephos_ser16_pen * P_552 - kpln_phos_ser16_pen * P_542) + (3 * kpln_dephos_thr17 * P_543 - 3 * kpln_phos_thr17 * P_542) + (2 * kpln_phos_ser16_pen * P_532 - 4 * kpln_dephos_ser16_pen * P_542) + (4 * kpln_phos_thr17 * P_541 - 2 * kpln_dephos_thr17 * P_542) + 
        (kpln_pen * P_100 * P_111^2 * P_110^2 - (kpln_depen * P_542)/50) + (kpln_pen * P_111 * P_110^3 * P_101 - (kpln_depen * P_542)/50))
    
dot(P_552) = ((3 * kpln_dephos_thr17 * P_553 - 3 * kpln_phos_thr17 * P_552) + (kpln_phos_ser16_pen * P_542 - 5 * kpln_dephos_ser16_pen * P_552) + (4 * kpln_phos_thr17 * P_551 - 2 * kpln_dephos_thr17 * P_552) + 
        (kpln_pen * P_111^2 * P_110^3 - (kpln_depen * P_552)/10))
     
dot(P_503) = ((kpln_dephos_ser16_pen * P_513 - 5 * kpln_phos_ser16_pen * P_503) + (4 * kpln_dephos_thr17 * P_504 - 2 * kpln_phos_thr17 * P_503) + (3 * kpln_phos_thr17 * P_502 - 3 * kpln_dephos_thr17 * P_503) + 
        (kpln_pen * P_100^2 * P_101^3 - (kpln_depen * P_503)/10))
    
dot(P_513) = ((2 * kpln_dephos_ser16_pen * P_523 - 4 * kpln_phos_ser16_pen * P_513) + (4 * kpln_dephos_thr17 * P_514 - 2 * kpln_phos_thr17 * P_513) + (5 * kpln_phos_ser16_pen * P_503 - kpln_dephos_ser16_pen * P_513) + (3 * kpln_phos_thr17 * P_512 - 3 * kpln_dephos_thr17 * P_513) + 
        (kpln_pen * P_100^2 * P_111 * P_101^2 - (kpln_depen * P_513)/50) + (kpln_pen  * P_100 * P_110 * P_101^3 - (kpln_depen * P_513)/50))
    
dot(P_523) = ((3 * kpln_dephos_ser16_pen * P_533 - 3 * kpln_phos_ser16_pen * P_523) + (4 * kpln_dephos_thr17 * P_524 - 2 * kpln_phos_thr17 * P_523) + (4 * kpln_phos_ser16_pen * P_513 - 2 * kpln_dephos_ser16_pen * P_523) + (3 * kpln_phos_thr17 * P_522 - 3 * kpln_dephos_thr17 * P_523) + 
        (kpln_pen * P_100 * P_111 * P_110 * P_101^2 - (kpln_depen * P_523)/100) + (kpln_pen * P_111^2 * P_100^2 * P_101 - (kpln_depen * P_523)/100) + (kpln_pen * P_110^2 * P_101^3 - (kpln_depen * P_523)/100))
        
dot(P_533) = ((4 * kpln_dephos_ser16_pen * P_543 - 2 * kpln_phos_ser16_pen * P_533) + (4 * kpln_dephos_thr17 * P_534 - 2 * kpln_phos_thr17 * P_533) + (3 * kpln_phos_ser16_pen * P_523 - 3 * kpln_dephos_ser16_pen * P_533) + (3 * kpln_phos_thr17 * P_532 - 3 * kpln_dephos_thr17 * P_533) + 
        (kpln_pen * P_100 * P_111^2 * P_110 * P_101 - (kpln_depen * P_533)/100) + (kpln_pen * P_111 * P_110^2 * P_101^2 - (kpln_depen * P_533)/100) + (kpln_pen * P_100^2 * P_111^3 - (kpln_depen * P_533)/100))
    
dot(P_543) = ((5 * kpln_dephos_ser16_pen * P_553 - kpln_phos_ser16_pen * P_543) + (4 * kpln_dephos_thr17 * P_544 - 2 * kpln_phos_thr17 * P_543) + (2 * kpln_phos_ser16_pen * P_533 - 4 * kpln_dephos_ser16_pen * P_543) + (3 * kpln_phos_thr17 * P_542 - 3 * kpln_dephos_thr17 * P_543) + 
        (kpln_pen * P_111^2 * P_110^2 * P_101 - (kpln_depen * P_543)/50) + (kpln_pen * P_100 * P_111^3 * P_110 - (kpln_depen * P_543)/50))
    
dot(P_553) = ((4 * kpln_dephos_thr17 * P_554 - 2 * kpln_phos_thr17 * P_553) + (kpln_phos_ser16_pen * P_543 - 5 * kpln_dephos_ser16_pen * P_553) + (3 * kpln_phos_thr17 * P_552 - 3 * kpln_dephos_thr17 * P_553) + 
        (kpln_pen * P_111^3 * P_110^2 - (kpln_depen * P_553)/10))
    
dot(P_504) = ((kpln_dephos_ser16_pen * P_514 - 5 * kpln_phos_ser16_pen * P_504) + (5 * kpln_dephos_thr17 * P_505 - kpln_phos_thr17 * P_504) + (2 * kpln_phos_thr17 * P_503 - 4 * kpln_dephos_thr17 * P_504) + 
        (kpln_pen * P_100 * P_101^4 - (kpln_depen * P_504)/5))
    
dot(P_514) = ((2 * kpln_dephos_ser16_pen * P_524 - 4 * kpln_phos_ser16_pen * P_514) + (5 * kpln_dephos_thr17 * P_515 - kpln_phos_thr17 * P_514) + (5 * kpln_phos_ser16_pen * P_504 - kpln_dephos_ser16_pen * P_514) + (2 * kpln_phos_thr17 * P_513 - 4 * kpln_dephos_thr17 * P_514) + 
        (kpln_pen * P_100 * P_111 * P_101^3 - (kpln_depen * P_514)/25) + (kpln_pen * P_110 * P_101^4 - (kpln_depen * P_514)/25))
    
dot(P_524) = ((3 * kpln_dephos_ser16_pen * P_534 - 3 * kpln_phos_ser16_pen * P_524) + (5 * kpln_dephos_thr17 * P_525 - kpln_phos_thr17 * P_524) + (4 * kpln_phos_ser16_pen * P_514 - 2 * kpln_dephos_ser16_pen * P_524) + (2 * kpln_phos_thr17 * P_523 - 4 * kpln_dephos_thr17 * P_524) + 
        (kpln_pen * P_100 * P_111^2 * P_101^2 - (kpln_depen * P_524)/50) + (kpln_pen * P_111 * P_110 * P_101^3 - (kpln_depen * P_524)/50))
    
dot(P_534) = ((4 * kpln_dephos_ser16_pen * P_544 - 2 * kpln_phos_ser16_pen * P_534) + (5 * kpln_dephos_thr17 * P_535 - kpln_phos_thr17 * P_534) + (3 * kpln_phos_ser16_pen * P_524 - 3 * kpln_dephos_ser16_pen * P_534) + (2 * kpln_phos_thr17 * P_533 - 4 * kpln_dephos_thr17 * P_534) + 
        (kpln_pen * P_111^2 * P_110 * P_101^2 - (kpln_depen * P_534)/50) + (kpln_pen * P_100 * P_111^3 * P_101 - (kpln_depen * P_534)/50))
    
dot(P_544) = ((5 * kpln_dephos_ser16_pen * P_554 - kpln_phos_ser16_pen * P_544) + (5 * kpln_dephos_thr17 * P_545 - kpln_phos_thr17 * P_544) + (2 * kpln_phos_ser16_pen * P_534 - 4 * kpln_dephos_ser16_pen * P_544) + (2 * kpln_phos_thr17 * P_543 - 4 * kpln_dephos_thr17 * P_544) + 
        (kpln_pen * P_111^3 * P_110 * P_101 - (kpln_depen * P_544)/25) + (kpln_pen * P_100 * P_111^4 - (kpln_depen * P_544)/25))
    
dot(P_554) = ((5 * kpln_dephos_thr17 * P_555 - kpln_phos_thr17 * P_554) + (kpln_phos_ser16_pen * P_544 - 5 * kpln_dephos_ser16_pen * P_554) + (2 * kpln_phos_thr17 * P_553 - 4 * kpln_dephos_thr17 * P_554) + 
        (kpln_pen * P_111^4 * P_110 - (kpln_depen * P_554)/5))
    
dot(P_505) = ((kpln_dephos_ser16_pen * P_515 - 5 * kpln_phos_ser16_pen * P_505) + (kpln_phos_thr17 * P_504 - 5 * kpln_dephos_thr17 * P_505) + 
        (kpln_pen * P_101^5 - (kpln_depen * P_505)/1))
    
dot(P_515) = ((2 * kpln_dephos_ser16_pen * P_525 - 4 * kpln_phos_ser16_pen * P_515) + (kpln_phos_thr17 * P_514 - 5 * kpln_dephos_thr17 * P_515) + (5 * kpln_phos_ser16_pen * P_505 - kpln_dephos_ser16_pen * P_515) + 
        (kpln_pen * P_101^4 * P_111 - (kpln_depen * P_515)/5))
    
dot(P_525) = ((3 * kpln_dephos_ser16_pen * P_535 - 3 * kpln_phos_ser16_pen * P_525) + (kpln_phos_thr17 * P_524 - 5 * kpln_dephos_thr17 * P_525) + (4 * kpln_phos_ser16_pen * P_515 - 2 * kpln_dephos_ser16_pen * P_525) + 
        (kpln_pen * P_101^3 * P_111^2 - (kpln_depen * P_525)/10))
    
dot(P_535) = ((4 * kpln_dephos_ser16_pen * P_545 - 2 * kpln_phos_ser16_pen * P_535) + (kpln_phos_thr17 * P_534 - 5 * kpln_dephos_thr17 * P_535) + (3 * kpln_phos_ser16_pen * P_525 - 3 * kpln_dephos_ser16_pen * P_535) + 
        (kpln_pen * P_101^2 * P_111^3 - (kpln_depen * P_535)/10))
    
dot(P_545) = ((5 * kpln_dephos_ser16_pen * P_555 - kpln_phos_ser16_pen * P_545) + (kpln_phos_thr17 * P_544 - 5 * kpln_dephos_thr17 * P_545) + (2 * kpln_phos_ser16_pen * P_535 - 4 * kpln_dephos_ser16_pen * P_545) + 
        (kpln_pen * P_101 * P_111^4 - (kpln_depen * P_545)/5))
    
dot(P_555) = ((kpln_phos_thr17 * P_554 - 5 * kpln_dephos_thr17 * P_555) + (kpln_phos_ser16_pen * P_545 - 5 * kpln_dephos_ser16_pen * P_555) +
        (kpln_pen * P_111^5 - (kpln_depen * P_555)/1)) 

dot(N_10) = ((kserca_sln_de * S_N_10 - kserca_sln * S * N_10) + 
  (kserca_sln_de * S_P_100_N_10 - kserca_sln * S_P_100 * N_10) +
  (kserca_sln_de * S_P_110_N_10 - kserca_sln * S_P_110 * N_10) +
  (kserca_sln_de * S_P_101_N_10 - kserca_sln * S_P_101 * N_10) +
  (kserca_sln_de * S_P_111_N_10 - kserca_sln * S_P_111 * N_10) +
  (ksln_dephos * N_11 - ksln_phos * N_10) +
  5 * ((ksln_depen * N_50)/1 - ksln_pen * N_10^5) +
  4 * ((ksln_depen * N_51)/5 - ksln_pen * N_10^4 * N_11) +
  3 * ((ksln_depen * N_52)/10 - ksln_pen * N_10^3 * N_11^2) +
  2 * ((ksln_depen * N_53)/10 - ksln_pen * N_10^2 * N_11^3) +
  1 * ((ksln_depen * N_54)/5 - ksln_pen * N_10 * N_11^4)) 
  
dot(N_11) = ((kserca_sln_de * S_N_11 - kserca_sln * S * N_11) + 
  (kserca_sln_de * S_P_100_N_11 - kserca_sln * S_P_100 * N_11) +
  (kserca_sln_de * S_P_110_N_11 - kserca_sln * S_P_110 * N_11) +
  (kserca_sln_de * S_P_101_N_11 - kserca_sln * S_P_101 * N_11) +
  (kserca_sln_de * S_P_111_N_11 - kserca_sln * S_P_111 * N_11) +
  (ksln_phos * N_10 - ksln_dephos * N_11) +
  1 * ((ksln_depen * N_51)/5 - ksln_pen * N_10^4 * N_11) +
  2 * ((ksln_depen * N_52)/10 - ksln_pen * N_10^3 * N_11^2) +
  3 * ((ksln_depen * N_53)/10 - ksln_pen * N_10^2 * N_11^3) +
  4 * ((ksln_depen * N_54)/5 - ksln_pen * N_10 * N_11^4) +
  5 * ((ksln_depen * N_55)/1 - ksln_pen * N_11^5)) 
  
dot(N_50) = ((ksln_pen * N_10^5 - (ksln_depen * N_50)/1) + (ksln_dephos * N_51 - 5 * ksln_phos * N_50)) 
dot(N_51) = ((ksln_pen * N_11 * N_10^4 - (ksln_depen * N_51)/5) + (2 * ksln_dephos * N_52 - 4 * ksln_phos * N_51) + (5 * ksln_phos * N_50 - ksln_dephos * N_51))
dot(N_52) = ((ksln_pen * N_11^2 * N_10^3 - (ksln_depen * N_52)/10) + (3 * ksln_dephos * N_53 - 3 * ksln_phos * N_52) + (4 * ksln_phos * N_51 - 2 * ksln_dephos * N_52))
dot(N_53) = ((ksln_pen * N_11^3 * N_10^2 - (ksln_depen * N_53)/10) + (4 * ksln_dephos * N_54 - 2 * ksln_phos * N_53) + (3 * ksln_phos * N_52 - 3 * ksln_dephos * N_53))
dot(N_54) = ((ksln_pen * N_11^4 * N_10 - (ksln_depen * N_54)/5) + (5 * ksln_dephos * N_55 - ksln_phos * N_54) + (2 * ksln_phos * N_53 - 4 * ksln_dephos * N_54))
dot(N_55) = ((ksln_pen * N_11^5 - (ksln_depen * N_55)/1) + (ksln_phos * N_54 - 5 * ksln_dephos * N_55))



dot(Total_S) = dot(S) + dot(S_P_100) + dot(S_P_110) + dot(S_P_101) + dot(S_P_111) + dot(S_N_10) + dot(S_N_11) + dot(S_P_100_N_10) + dot(S_P_100_N_11) + dot(S_P_110_N_10) + dot(S_P_110_N_11) + dot(S_P_101_N_10) + dot(S_P_101_N_11) + dot(S_P_111_N_10) + dot(S_P_111_N_11)
dot(Total_P) = dot(S_P_100) + dot(S_P_110) + dot(S_P_101) + dot(S_P_100_N_10) + dot(S_P_110_N_10) + dot(S_P_101_N_10) + dot(S_P_111_N_10) + dot(P_100) + dot(P_110) + dot(P_101) + dot(P_111) + 5 * dot(P_500) + 5 * dot(P_510) + 5 * dot(P_520) + 5 * dot(P_530) + 5 * dot(P_540) + 5 * dot(P_550) + 5 * dot(P_501) + 5 * dot(P_511) + 5 * dot(P_521) + 5 * dot(P_531) + 5 * dot(P_541) + 5 * dot(P_551) + 5 * dot(P_502) + 5 * dot(P_512) + 5 * dot(P_522) + 5 * dot(P_532) + 5 * dot(P_542) + 5 * dot(P_552) + 5 * dot(P_503) + 5 * dot(P_513) + 5 * dot(P_523) + 5 * dot(P_533) + 5 * dot(P_543) + 5 * dot(P_553) + 5 * dot(P_504) + 5 * dot(P_514) + 5 * dot(P_524) + 5 * dot(P_534) + 5 * dot(P_544) + 5 * dot(P_554) + 5 * dot(P_505) + 5 * dot(P_515) + 5 * dot(P_525) + 5 * dot(P_535) + 5 * dot(P_545) + 5 * dot(P_555) + dot(S_P_111) + dot(S_P_100_N_11) + dot(S_P_110_N_11) + dot(S_P_101_N_11) + dot(S_P_111_N_11)
dot(Total_N) = dot(S_N_10) + dot(S_N_11) + dot(S_P_100_N_10) + dot(S_P_110_N_10) + dot(S_P_101_N_10) + dot(S_P_111_N_10) + dot(N_10) + dot(N_11) + 5 * dot(N_50) + 5 * dot(N_51) + 5 * dot(N_52) + 5 * dot(N_53) + 5 * dot(N_54) + 5 * dot(N_55) + dot(S_P_100_N_11) + dot(S_P_110_N_11) + dot(S_P_101_N_11) + dot(S_P_111_N_11)
dot(Total_P_Mon) =  dot(P_100) + dot(P_110) + dot(P_101) + dot(P_111) + dot(S_P_100) + dot(S_P_110) + dot(S_P_101) + dot(S_P_111) + dot(S_P_100_N_10) + dot(S_P_110_N_10) + dot(S_P_101_N_10) + dot(S_P_111_N_10) + dot(S_P_100_N_11) + dot(S_P_110_N_11) + dot(S_P_101_N_11) + dot(S_P_111_N_11)
dot(Total_P_Pen) =  5 * dot(P_500) + 5 * dot(P_510) + 5 * dot(P_520) + 5 * dot(P_530) + 5 * dot(P_540) + 5 * dot(P_550) + 5 * dot(P_501) + 5 * dot(P_511) + 5 * dot(P_521) + 5 * dot(P_531) + 5 * dot(P_541) + 5 * dot(P_551) + 5 * dot(P_502) + 5 * dot(P_512) + 5 * dot(P_522) + 5 * dot(P_532) + 5 * dot(P_542) + 5 * dot(P_552) + 5 * dot(P_503) + 5 * dot(P_513) + 5 * dot(P_523) + 5 * dot(P_533) + 5 * dot(P_543) + 5 * dot(P_553) + 5 * dot(P_504) + 5 * dot(P_514) + 5 * dot(P_524) + 5 * dot(P_534) + 5 * dot(P_544) + 5 * dot(P_554) + 5 * dot(P_505) + 5 * dot(P_515) + 5 * dot(P_525) + 5 * dot(P_535) + 5 * dot(P_545) + 5 * dot(P_555)

dot(Total_N_Mon) = dot(S_N_10) + dot(S_N_11) + dot(S_P_100_N_10) + dot(S_P_110_N_10) + dot(S_P_101_N_10) + dot(S_P_111_N_10) + dot(N_10) + dot(N_11) + dot(S_P_100_N_11) + dot(S_P_110_N_11) + dot(S_P_101_N_11) + dot(S_P_111_N_11) 
dot(Total_N_Pen) = 5 * dot(N_50) + 5 * dot(N_51) + 5 * dot(N_52) + 5 * dot(N_53) + 5 * dot(N_54) + 5 * dot(N_55)
Total_N_Phos = N_11 + S_N_11 + S_P_100_N_11 + S_P_101_N_11 + S_P_110_N_11 + S_P_111_N_11 + N_51 + 2 * N_52 + 3 * N_53 + 4 * N_54 + 5 * N_55

alt_tot_pen_P = 5 * P_500 + 5 * P_501 + 5 * P_502 + 5 * P_503 + 5 * P_504 + 5 * P_505 + 5 * P_510 + 5 * P_511 + 5 * P_512 + 5 * P_513 + 5 * P_514 + 5 * P_515 + 5 * P_520 + 5 * P_521 + 5 * P_522 + 5 * P_523 + 5 * P_524 + 5 * P_525 + 5 * P_531 + 5 * P_532 + 5 * P_533 + 5 * P_534 + 5 * P_535 + 5 * P_540 + 5 * P_541 + 5 * P_542 + 5 * P_543 + 5 * P_544 + 5 * P_545 + 5 * P_550 + 5 * P_551 + 5 * P_552 + 5 * P_553 + 5 * P_554 + 5 * P_555
alt_tot_mon_N = dot(S_N_10) + dot(S_N_11) + dot(S_P_100_N_10) + dot(S_P_110_N_10) + dot(S_P_101_N_10) + dot(S_P_111_N_10) + dot(N_10) + dot(N_11) + dot(S_P_100_N_11) + dot(S_P_110_N_11) + dot(S_P_101_N_11) + dot(S_P_111_N_11) 
alt_tot_pen_N = 5 * N_50 + 5 * N_51 + 5 * N_52 + 5 * N_53 + 5 * N_54 + 5 * N_55

dot(Total_P_Mon_PKA) = dot(P_110) + dot(P_111) + dot(S_P_110) + dot(S_P_111) + dot(S_P_110_N_10) + dot(S_P_111_N_10) + dot(S_P_110_N_11) + dot(S_P_111_N_11)
dot(Total_P_Pen_PKA) = 1 * dot(P_510) + 2 * dot(P_520) + 3 * dot(P_530) + 4 * dot(P_540) + 5 * dot(P_550) + 1 * dot(P_511) + 2 * dot(P_521) + 3 * dot(P_531) + 4 * dot(P_541) + 5 * dot(P_551) + 1 * dot(P_512) + 2 * dot(P_522) + 3 * dot(P_532) + 4 * dot(P_542) + 5 * dot(P_552) + 1 * dot(P_513) + 2 * dot(P_523) + 3 * dot(P_533) + 4 * dot(P_543) + 5 * dot(P_553) + 1 * dot(P_514) + 2 * dot(P_524) + 3 * dot(P_534) + 4 * dot(P_544) + 5 * dot(P_554) + 1 * dot(P_515) + 2 * dot(P_525) + 3 * dot(P_535) + 4 * dot(P_545) + 5 * dot(P_555)
Total_P_Mon_thr17 = P_101 + P_111 + S_P_101 + S_P_111 + S_P_101_N_10 + S_P_111_N_10 + S_P_101_N_11 + S_P_111_N_11
Total_P_Pen_thr17 = 1 * P_501 + 2 * P_502 + 3 * P_503 + 4 * P_504 + 5 * P_505 + 1 * P_511 + 2 * P_512 + 3 * P_513 + 4 * P_514 + 5 * P_515 + 1 * P_521 + 2 * P_522 + 3 * P_523 + 4 * P_524 + 5 * P_525 + 1 * P_531 + 2 * P_532 + 3 * P_533 + 4 * P_534 + 5 * P_535 + 1 * P_541 + 2 * P_542 + 3 * P_543 + 4 * P_544 + 5 * P_545 + 1 * P_551 + 2 * P_552 + 3 * P_553 + 4 * P_554 + 5 * P_555
Total_P_thr17 = Total_P_Mon_thr17 + Total_P_Pen_thr17
dot(Total_P_non_Mon_PKA) = dot(P_100) + dot(P_101) + dot(S_P_100) + dot(S_P_101) + dot(S_P_100_N_10) + dot(S_P_101_N_10) + dot(S_P_100_N_11) + dot(S_P_101_N_11)
dot(Total_P_non_Pen_PKA) = 1 * dot(P_540) + 2 * dot(P_530) + 3 * dot(P_520) + 4 * dot(P_510) + 5 * dot(P_500) + 1 * dot(P_541) + 2 * dot(P_531) + 3 * dot(P_521) + 4 * dot(P_511) + 5 * dot(P_501) + 1 * dot(P_542) + 2 * dot(P_532) + 3 * dot(P_522) + 4 * dot(P_512) + 5 * dot(P_502) + 1 * dot(P_543) + 2 * dot(P_533) + 3 * dot(P_523) + 4 * dot(P_513) + 5 * dot(P_503) + 1 * dot(P_544) + 2 * dot(P_534) + 3 * dot(P_524) + 4 * dot(P_514) + 5 * dot(P_504) + 1 * dot(P_545) + 2 * dot(P_535) + 3 * dot(P_525) + 4 * dot(P_515) + 5 * dot(P_505)
dot(Total_P_PKA) = dot(Total_P_Mon_PKA) + dot(Total_P_Pen_PKA)

hill = 2.55
shift = 4E-4
corr_fact = 0.46*0.012 
V_max_SERCA = 3.17	
Km_SERCA = 0.00032
V_max_SERCA_PLN = 3.0
Km_SERCA_PLN = 0.00078
Km_SERCA_PLN_P_ser16 = 0.00044	
Km_SERCA_PLN_P_thr17 = 0.00067	
Km_SERCA_PLN_P_both = 0.00053			
V_max_SERCA_SLN = 0.88	
Km_SERCA_SLN = 0.00032
V_max_SERCA_PLN_SLN = 0.77
V_max_SERCA_SLN_P = 2
Km_SERCA_PLN_SLN = 0.00078




SERCA_reverse =(SR_Ca_Concentrations.Ca_sr / parameters.Kmr)^hill


Ca_in_mM = Ca_Concentrations.Ca_i / 1		
J_up_SERCA = V_max_SERCA * S * ((Ca_in_mM/Km_SERCA)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA)^hill + SERCA_reverse)    
J_up_SERCA_PLN = V_max_SERCA_PLN * (S_P_100 + S_P_100_N_11) * ((Ca_in_mM/Km_SERCA_PLN)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN)^hill + SERCA_reverse)
J_up_SERCA_SLN = V_max_SERCA_SLN * (S_N_10 + S_P_110_N_10 + S_P_101_N_10 + S_P_111_N_10) * ((Ca_in_mM/Km_SERCA_SLN)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_SLN)^hill + SERCA_reverse)
J_up_SERCA_PLN_SLN = V_max_SERCA_PLN_SLN * S_P_100_N_10 * ((Ca_in_mM/Km_SERCA_PLN_SLN)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN_SLN)^hill + SERCA_reverse)

J_up_SERCA_PLN_P_ser16 = V_max_SERCA * (S_P_110) * ((Ca_in_mM/Km_SERCA_PLN_P_ser16)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN_P_ser16)^hill + SERCA_reverse)     
J_up_SERCA_PLN_P_thr17 = V_max_SERCA * (S_P_101) * ((Ca_in_mM/Km_SERCA_PLN_P_thr17)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN_P_thr17)^hill + SERCA_reverse) 
J_up_SERCA_PLN_P_both = V_max_SERCA * (S_P_111) * ((Ca_in_mM/Km_SERCA_PLN_P_both)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN_P_both)^hill + SERCA_reverse) 

J_up_SERCA_SLN_P = V_max_SERCA_SLN_P * (S_N_11) * ((Ca_in_mM/Km_SERCA_SLN)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_SLN)^hill + SERCA_reverse) 
J_up_SERCA_PLN_P_ser16_SLN_P = V_max_SERCA_SLN_P * (S_P_110_N_11) * ((Ca_in_mM/Km_SERCA_PLN_P_ser16)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN_P_ser16)^hill + SERCA_reverse) 
J_up_SERCA_PLN_P_thr17_SLN_P = V_max_SERCA_SLN_P * (S_P_101_N_11) * ((Ca_in_mM/Km_SERCA_PLN_P_thr17)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN_P_thr17)^hill + SERCA_reverse) 
J_up_SERCA_PLN_P_both_SLN_P = V_max_SERCA_SLN_P * (S_P_111_N_11) * ((Ca_in_mM/Km_SERCA_PLN_P_both)^hill - SERCA_reverse) / (1 + (Ca_in_mM/Km_SERCA_PLN_P_both)^hill + SERCA_reverse) 
		
J_up_new = corr_fact * (J_up_SERCA + J_up_SERCA_PLN + J_up_SERCA_SLN + J_up_SERCA_PLN_SLN + J_up_SERCA_PLN_P_ser16 + J_up_SERCA_PLN_P_thr17 + J_up_SERCA_PLN_P_both + J_up_SERCA_SLN_P + J_up_SERCA_PLN_P_ser16_SLN_P + J_up_SERCA_PLN_P_thr17_SLN_P + J_up_SERCA_PLN_P_both_SLN_P)

# Normalize J_up_new
normalized_J_up_new = (J_up_new / 0.3585) #value to normalize for max SERCA activity of WT


[engine]
time = 0 bind time
    in [ms]
pace = 0 bind pace    

[membrane]
C = 1 [uF/cm^2] : The membrane capacitance
#dot(V) = -(1/C) * ( ??? )
    in [mV]
    

[SR_Ca_Concentrations]
Ca_sr = 0

[Ca_Concentrations]
Ca_i = 1E-2

[parameters]
Kmr = 1.7 [mM]
    in [mM]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100.0    0.5      1000.0   0

[[script]]
import matplotlib.pyplot as plt
import numpy as np
import myokit
import scipy.optimize



Ca_intra = [1.74E-05, 1.39E-05, 1.43E-05, 2.54E-05, 3.42E-05, 5.19E-05, 6.32E-05, 7.14E-05, 8.04E-05, 8.49E-05, 0.000103503, 0.000133287, 0.000139462, 0.000170247, 0.000232108, 0.000239364, 0.000281631, 0.000284324, 0.000326125, 0.000390454, 0.000443887, 0.000649623, 0.000732949, 0.000737225, 0.000976439, 0.001282025, 0.001380965, 0.001408991, 0.001648167, 0.001704985, 0.001833108, 0.002228219, 0.002862192, 0.003428219, 0.004443697, 0.006047269]
Relative_SERCA_Activity = [-0.006017103, -9.13E-05, 0.015951401, 0.01827575, 0.026219705, 0.008069714, 0.072183516, 0.055624029, 0.039996015, 0.096900786, 0.168738308, 0.325531356, 0.134398297, 0.259968147, 0.444887126, 0.204607508, 0.50864811, 0.576773861, 0.754187404, 0.393681433, 0.688129085, 0.633157658, 1.075513319, 0.817765894, 0.94454741, 0.897931851, 0.859338786, 1.177795653, 1.026376972, 0.985090804, 1.0460885, 0.99544926, 1.0001, 0.999610472, 1.0001, 1.008193139]

# Get model and protocol, create simulation
m_WT = get_model()
# Get pacing variable
p = m_WT.get('engine.pace')
# Remove binding to pacing mechanism
p.set_binding(None)

# Get membrane potential
v = m_WT.get('Ca_Concentrations.Ca_i')

#v.set_rhs(0)
# Bind v's value to the pacing mechanism
v.set_binding('pace')

p = myokit.pacing.steptrain(
    vsteps=Ca_intra,
    vhold = 1E-5,   
    tpre  = 50000,   # 20000 milliseconds pre-conditioning at Vhold
    tstep = 40000,   # 20 seconds at step potential
    )
t = p.characteristic_time()

# Create the errorfunction
def errorfunc(x, showit=0):

    # create simulation
    s = myokit.Simulation(m_WT, p)
    
    #Set the parameters to be changed
    s.set_max_step_size(1000)
    s.set_constant('SERCA.hill', x[0])
    s.set_constant('SERCA.K_SLN_phos', x[1])
    s.set_constant('SERCA.K_PLN_phos_thr17', x[2])
    s.set_constant('SERCA.V_max_SERCA', x[3])
    s.set_constant('SERCA.Km_SERCA', x[4])
    s.set_constant('SERCA.V_max_SERCA_PLN', x[5])
    s.set_constant('SERCA.Km_SERCA_PLN', x[6])
    s.set_constant('SERCA.V_max_SERCA_SLN', x[7])
    s.set_constant('SERCA.Km_SERCA_SLN', x[8])
    s.set_constant('SERCA.V_max_SERCA_PLN_SLN', x[9])
    s.set_constant('SERCA.Km_SERCA_PLN_SLN', x[10])
    s.set_constant('SERCA.Km_SERCA_PLN_P', x[11])
    s.set_constant('SERCA.Km_SERCA_SLN_P', x[12])
    s.set_constant('SERCA.Km_SERCA_PLN_P_SLN_P', x[13])
        
    # Run
#    s.pre(20000)
    d = s.run(t)#log=['engine.time', 'Ca_Concentrations.Ca_i', 'SERCA.J_up_new'])
#    plt.figure()
#    plt.subplot(2,1,1)
#    plt.plot(d['engine.time'],d['SERCA.J_up_new'])
#    plt.subplot(2,1,2)
#    plt.plot(d['engine.time'],d['Ca_Concentrations.Ca_i'])
    ds = d.split_periodic(90000, adjust=True)
    # Updating the model Open probability values every iteration so the model curve can be fitted to the experimental data
    model_SERCA_activity = np.ones(len(Ca_intra))
#    print(model_SERCA_activity)
    for k, d in enumerate(ds):
        ds[k] = d.trim_left(70000, adjust=True).trim_right(1000)
#        print(np.max(d['SERCA.J_up_new']))
        model_SERCA_activity[k] = np.max(d['SERCA.J_up_new']) #gives the max Open Probability for each membrane voltage and puts it in the array
    # Normalize the values
    model_SERCA_activity_max = model_SERCA_activity[-1:][0]   #This is the value of the open probability of Membrane potential 60mV
    model_SERCA_activity_max = np.repeat(model_SERCA_activity_max, len(Ca_intra))
    model_SERCA_activity_final = np.divide(model_SERCA_activity, model_SERCA_activity_max)
    print(model_SERCA_activity_final)

    #Calculate the error
    error = np.sum((model_SERCA_activity_final - Relative_SERCA_Activity) * (model_SERCA_activity_final - Relative_SERCA_Activity))
    
    # Plot the figure and print the results
    if showit ==1:
        plt.figure()
        plt.plot(Ca_intra, model_SERCA_activity_final, '-k', Ca_intra, Relative_SERCA_Activity, 'o')
        plt.xscale('log')
    print ("X: [%f, %f, %f,%f, %f, %f,%f, %f, %f,%f, %f, %f,%f, %f]; Error: %f" % (x[0], x[1], x[2],x[3], x[4], x[5],x[6], x[7], x[8],x[9], x[10], x[11],x[12], x[13], error))
    return error

# Optimisation    
x0 = [2.55, 14.4, 7.2,3.17, 0.00014, 3.0,0.0006, 0.88, 0.00015,0.77, 0.0008, 0.0005,0.00025, 0.0005] # original parameter inputs
errorfunc(x0, 1)
#xfinal, errfinal = scipy.optimize.minimize(errorfunc, x0,0, method= 'Nelder-Mead', options={'disp': True, 'maxiter': 50})
#errorfunc(xfinal,1)

